#include<iostream>
#include<algorithm>
using namespace std;
int main()
{
    int n,k;
    cin>>n>>k;
    int a[n],b[100001];
    for(int i=0; i<n; i++)
        cin>>a[i];
    for(int i=1; i<100000; i++)
        b[i]=100001;
    for(int i=0; i<n; i++)
    {
        for(int z=a[i]; z<=k; z++)
        {
            b[z]=min(b[z],b[z-a[i]]+1);
        }
    }
    if(b[k]==100001)
        cout<<-1;
    else
        cout<<b[k];
}
/*
동전1(2293)문제는 경우의 수를 구하는 문제인데 이 문제는 사용하는 동전의 최소 개수를 구하는 문제이다.
동전을 이용하여 n원을 만들었다고 하자. k원짜리 동전을 이용하여 만들 수 있는 돈은 n+k원이다.

처음에 1번 동전을 사용하여 만들 수 있는 모든 경우를 구하고 필요한 동전의 개수도 구한다.
예를 들어 1번동전이 k원이라면 만들 수 있는 경우는 k, 2k, 3k, 4k....가 된다.
그 다음 2번 동전을 사용하여 경우의 수를 구한다.2원 동전이 n원이라 할때 
1~k원까지 반복문을 돌면서 s원을 만들려면 s-n원을 만들 수 있는지 확인하고 s-n을 만드는데 필요한 최소 동전 개수+1
을 해주면 된다. 그냥 값을 바꿔주면 안되고 s원을 만드는데 필요한 동전 개수가 더 적은 쪽을 선택해야 한다.
s-n을 만들 수 없다면 s원도 만들 수 없으니 그냥 넘어간다.
이렇게 n가지 동전에 대해서 이를 반복해주면 된다.
*/
