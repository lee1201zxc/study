여러 함수 존재

upper_bound(a,a+n,k) -> a부터 a+n까지중 k가 어디까지 나오는지 알려준다.
lower_bound(a,a+n,k) -> a부터 a+n까지중 k가 어디부터 나오는지 알려준다.

sort(a,a+n) -> a부터a+n까지 원소들을 정렬한다, 뒤에 함수인자 추가해서 정렬기준 바꿀 수 있다.]
copy(a,a+n, b); a~a+n까지 값을 b에 복사(배열)
정확히는 copy(시작 지점, 끝나는 지점, 복사 될 시작지점) *즉 2차원배열 copy시 copy(&a[0][0],&a[0][0]+n*n,&b[0][0])이런 식으로

find(a,b,10) -> a에서 b까지중 10이 나오는 곳을 찾는다.(처음으로)
ex-> p=find(a,b,10);

reverse(a.begin(),a.end()) 배열 a 뒤집기

next_permutation(a.begin(),a.end(),cmp) -> a의 배열을 가지고 순열을 출력함, 오름차순으로 정렬되어 있어야 함.
ex)
    string s = "abc";
    sort(s.begin(), s.end());
    do {
        cout << s << '\n';
    } while(next_permutation(s.begin(), s.end()));



int idx=lower_bound(v.begin(),v.end(),a[i])-v.begin()
lower_bound는 주소값을 반환하기 때문에 뒤에 v.begin()으로 인덱스값을 반환하도록 할 수 있다.
