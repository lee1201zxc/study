문자열을 다룰 수 있는 클래스

C언어 에서 쓰는 방법과는 다르게 문자열 끝에 '\0'이 들어가지 않으며 동적으로 할당 가능하다.

<string> 추가 후 사용


  입/출력

string str;         -> 문자열 생성
cin >> str;          -> 공백(space) 이전까지의 문자열을 입력받는다.
getline(cin, str);         // '\n' 이전까지의 문자열, 즉 한 줄을 통째로 입력받는다.  (공백 포함)
getline(cin, str, 'a')     // 'a' 문자 이전까지의 문자열을 입력받는다. getline(cin, str, '\n') == getline(cin, str)  
cout << str;        // 문자열을 출력한다.

  생성
 
 string str;	 빈 문자열 str 생성
 string str = "abcdef";
 str = "abcdef";
 string str("abcdef");
 string str2(str1);	 str1 문자열을 복사한 str2 생성
 
 연산자 이용
 
str1<str2 -> str2이 더크면 true(1), 아니면 false(0)반환
str2>str2 -> 위와 반대
str1==str2 -> 둘이 같으면 1, 다르면 0 반환
str1+str2 -> 문자열 str1과 str2를 합침




    <string> 멤버함수들

 원소 접근

str.at(index)	-> index 위치의 문자 반환. 유효한 범위인지 체크 O
str[index]	-> index 위치의 문자 반환. 유효한 범위인지 체크 X. 따라서 at 함수보다 접근이 빠름
str.front()	-> 문자열의 가장 앞 문자 반환
str.back()	-> 문자열의 가장 뒤 문자 반환

 크기 관련
 
str.length()	-> 문자열 길이 반환
str.size()	-> 문자열 길이 반환 (length와 동일)
str.capacity()	-> 문자열이 사용중인 메모리 크기 반환
str.resize(n)	-> string을 n의 크기로 만듦. 기존의 문자열 길이보다 n이 작다면 남은 부분은 삭제하고, n이 크다면 빈공간으로 채움
str.resize(n, 'a')	-> n이 string의 길이보다 더 크다면, 빈 공간을 'a'로 채움
str.shrink_to_fit()	-> string의 capacity가 실제 사용하는 메모리보다 큰 경우 낭비되는 메모리가 없도록 메모리를 줄여줌
str.reserve(n)	-> size = n만큼의 메모리를 미리 할당해줌
str.empty()	-> str이 빈 문자열인지 확인

 삽입, 삭제

str.append(str2)	-> str 뒤에 str2 문자열을 이어 붙여줌 ('+' 와 같은 역할)
str.append(str2, n, m)	-> str 뒤에 'str2의 n index부터 m개의 문자'를 이어 붙여줌
str.append(n, 'a')	-> str 뒤에 n개의 'a'를 이어 붙여줌
str.insert(n, str2)	-> n번째 index 앞에 str2 문자열을 삽입함.
str.replace(n, k, str2)	-> n번째 index부터 k개의 문자를 str2로 대체함
str.clear()	-> 저장된 문자열을 모두 지움
str.erase()	-> clear와 같은 동작
str.erase(n, m)	-> n번째 index부터 m개의 문자를 지움
str.push_back(c)	-> str의 맨 뒤에 c 문자를 붙여줌
str.pop_back()	-> str의 맨 뒤의 문자를 제거
str.assign(str2)	-> str에 str2 문자열을 할당. (변수 정의와 동일)

 기타
 
str.find("abcd")	-> "abcd"가 str에 포함되어있는지를 확인. 찾으면 해당 부분의 첫번째 index를 반환
str.find("abcd", n)	-> n번째 index부터 "abcd"를 find
str.substr()	-> str 전체를 반환
str.substr(n)	-> str의 n번째 index부터 끝까지의 문자를 부분문자열로 반환
str.substr(n, k)	-> str의 n번째 index부터 k개의 문자를 부분문자열로 반환
str.compare(str2)	-> str과 str2가 같은지를 비교. 같다면 0, str<str2 인 경우 음수, str>str2 인 경우 양수를 반환
compare(str1,str2) -> 위와 동일
swap(str1, str2)	-> str1과 str2를 바꿔줌. reference를 교환하는 방식
to_string()->string으로 변환

 <cctype> 에도 존재 하는 것들
isdigit(c)	->c 문자가 숫자이면 true, 아니면 false를 반환 
isalpha(c)	-> -> c 문자가 영어이면 true, 아니면 false를 반환
toupper(c)	-> c 문자를 대문자로 변환
tolower(c)	-> c 문자를 소문자로 변환
